{"hash":"a08a12c0c3d8e7ef0e20a379c6038879add3774d","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, forwardRef, ChangeDetectionStrategy, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/material/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { UntypedFormControl, Validators, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1$1 from '@angular/material/progress-bar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { animation, style, animate, keyframes, trigger, transition, query, stagger, animateChild, useAnimation } from '@angular/animations';\nimport * as i1$2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from '@angular/material/card';\nimport { MatCardModule } from '@angular/material/card';\n\nvar Colors;\n(function (Colors) {\n    Colors[\"primary\"] = \"primary\";\n    Colors[\"accent\"] = \"accent\";\n    Colors[\"warn\"] = \"warn\";\n})(Colors || (Colors = {}));\n\nvar Criteria;\n(function (Criteria) {\n    Criteria[\"at_least_eight_chars\"] = \"minChar\";\n    Criteria[\"at_least_one_lower_case_char\"] = \"lowerCase\";\n    Criteria[\"at_least_one_upper_case_char\"] = \"upperCase\";\n    Criteria[\"at_least_one_digit_char\"] = \"digit\";\n    Criteria[\"at_least_one_special_char\"] = \" specialChar\";\n    Criteria[\"at_custom_chars\"] = \"customChars\";\n})(Criteria || (Criteria = {}));\n\nclass MatPassToggleVisibilityComponent {\n    get type() {\n        return this.isVisible ? 'text' : 'password';\n    }\n}\nMatPassToggleVisibilityComponent.ɵfac = function MatPassToggleVisibilityComponent_Factory(t) { return new (t || MatPassToggleVisibilityComponent)(); };\nMatPassToggleVisibilityComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatPassToggleVisibilityComponent, selectors: [[\"mat-pass-toggle-visibility\"]], inputs: { isVisible: \"isVisible\", tabindex: \"tabindex\" }, decls: 3, vars: 2, consts: [[\"mat-icon-button\", \"\", \"matRipple\", \"\", \"matRippleCentered\", \"true\", \"matRipple\", \"\", \"type\", \"button\", 1, \"mat-icon-button\", \"cdk-focused\", \"cdk-mouse-focused\", 3, \"click\"]], template: function MatPassToggleVisibilityComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function MatPassToggleVisibilityComponent_Template_button_click_0_listener() { return ctx.isVisible = !ctx.isVisible; });\n        i0.ɵɵelementStart(1, \"mat-icon\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        i0.ɵɵattribute(\"tabindex\", ctx.tabindex ? ctx.tabindex : null);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.isVisible ? \"visibility\" : \"visibility_off\");\n    } }, dependencies: [i1.MatIcon, i2.MatRipple], encapsulation: 2 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPassToggleVisibilityComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-pass-toggle-visibility', encapsulation: ViewEncapsulation.None, template: \"<button\\n  (click)=\\\"isVisible = !isVisible\\\"\\n  class=\\\"mat-icon-button cdk-focused cdk-mouse-focused\\\"\\n  mat-icon-button\\n  matRipple\\n  matRippleCentered=\\\"true\\\"\\n  matRipple\\n  [attr.tabindex]=\\\"tabindex ? tabindex : null\\\"\\n  type=\\\"button\\\"\\n>\\n  <mat-icon>{{ isVisible ? \\\"visibility\\\" : \\\"visibility_off\\\" }}</mat-icon>\\n</button>\\n\" }]\n    }], null, { isVisible: [{\n            type: Input\n        }], tabindex: [{\n            type: Input\n        }] }); })();\n\nclass MatPasswordStrengthValidator {\n    isUndefinedOrEmpty(control) {\n        if (!control || !control.value || control.value.length === 0) {\n            return undefined;\n        }\n    }\n    validate(criteria, regex) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (!regex.test(control.value)) {\n                const failed = {};\n                failed[criteria] = {\n                    actualValue: control.value,\n                    requiredPattern: regex\n                };\n                return failed;\n            }\n            return undefined;\n        };\n        return validator;\n    }\n    confirm(password) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (control.value !== password) {\n                return {\n                    notConfirmed: {\n                        password: password,\n                        passwordConfirmation: control.value\n                    }\n                };\n            }\n            return undefined;\n        };\n        return validator;\n    }\n}\n\nconst RegExpValidator = {\n    'lowerCase': RegExp(/^(?=.*?[a-z])/),\n    'upperCase': RegExp(/^(?=.*?[A-Z])/),\n    'digit': RegExp(/^(?=.*?[0-9])/),\n    'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n\nclass MatPasswordStrengthComponent {\n    constructor() {\n        this.enableLengthRule = true;\n        this.enableLowerCaseLetterRule = true;\n        this.enableUpperCaseLetterRule = true;\n        this.enableDigitRule = true;\n        this.enableSpecialCharRule = true;\n        this.min = 8;\n        this.max = 30;\n        this.warnThreshold = 21;\n        this.accentThreshold = 81;\n        this.onStrengthChanged = new EventEmitter();\n        this.criteriaMap = new Map();\n        // TO ACCESS VIA CONTENT CHILD\n        this.passwordFormControl = new UntypedFormControl();\n        this.passwordConfirmationFormControl = new UntypedFormControl();\n        this.validatorsArray = [];\n        this.matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n        this._strength = 0;\n        this.propagateChange = (_) => {\n        };\n    }\n    get strength() {\n        return this._strength ? this._strength : 0;\n    }\n    get color() {\n        if (this._strength < this.warnThreshold) {\n            return Colors.warn;\n        }\n        else if (this._strength < this.accentThreshold) {\n            return Colors.accent;\n        }\n        else {\n            return Colors.primary;\n        }\n    }\n    ngOnInit() {\n        this.setRulesAndValidators();\n    }\n    ngOnChanges(changes) {\n        if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n            return;\n        }\n        else if (changes.externalError && changes.externalError.currentValue) {\n            this._color = Colors.warn;\n            return;\n        }\n        else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n            this.calculatePasswordStrength();\n        }\n        else {\n            this.password && this.password.length > 0 ?\n                this.calculatePasswordStrength() : this.reset();\n        }\n    }\n    parseCustomValidatorsRegex(value = this.customValidator) {\n        if (this.customValidator instanceof RegExp) {\n            return this.customValidator;\n        }\n        else if (typeof this.customValidator === 'string') {\n            return RegExp(this.customValidator);\n        }\n    }\n    setRulesAndValidators() {\n        this.validatorsArray = [];\n        this.criteriaMap = new Map();\n        this.passwordConfirmationFormControl\n            .setValidators(Validators.compose([\n            Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n        ]));\n        this.validatorsArray.push(Validators.required);\n        if (this.enableLengthRule) {\n            this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n            this.validatorsArray.push(Validators.minLength(this.min));\n            this.validatorsArray.push(Validators.maxLength(this.max));\n        }\n        if (this.enableLowerCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n        }\n        if (this.enableUpperCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n        }\n        if (this.enableDigitRule) {\n            this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n        }\n        if (this.enableSpecialCharRule) {\n            this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n        }\n        if (this.customValidator) {\n            this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n            this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n        }\n        this.criteriaMap.forEach((value, key) => {\n            this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n        });\n        this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n        this.Validators = Validators.compose([...this.validatorsArray]);\n    }\n    calculatePasswordStrength() {\n        const requirements = [];\n        const unit = 100 / this.criteriaMap.size;\n        // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n        // console.log('unit = ', unit);\n        requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false, this.customValidator ? this._containCustomChars() : false);\n        this._strength = requirements.filter(v => v).length * unit;\n        this.propagateChange(this.strength);\n        // console.log('length = ', this._strength / unit);\n        this.onStrengthChanged.emit(this.strength);\n        this.setRulesAndValidators();\n    }\n    reset() {\n        this._strength = 0;\n        this.containAtLeastMinChars =\n            this.containAtLeastOneLowerCaseLetter =\n                this.containAtLeastOneUpperCaseLetter =\n                    this.containAtLeastOneDigit =\n                        this.containAtCustomChars =\n                            this.containAtLeastOneSpecialChar = false;\n    }\n    writeValue(obj) {\n        if (obj) {\n            this._strength = obj;\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        // throw new Error(\"Method not implemented.\");\n    }\n    setDisabledState(isDisabled) {\n        // throw new Error(\"Method not implemented.\");\n    }\n    _containAtLeastMinChars() {\n        this.containAtLeastMinChars = this.password.length >= this.min;\n        return this.containAtLeastMinChars;\n    }\n    _containAtLeastOneLowerCaseLetter() {\n        this.containAtLeastOneLowerCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_lower_case_char)\n                .test(this.password);\n        return this.containAtLeastOneLowerCaseLetter;\n    }\n    _containAtLeastOneUpperCaseLetter() {\n        this.containAtLeastOneUpperCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_upper_case_char)\n                .test(this.password);\n        return this.containAtLeastOneUpperCaseLetter;\n    }\n    _containAtLeastOneDigit() {\n        this.containAtLeastOneDigit =\n            this.criteriaMap\n                .get(Criteria.at_least_one_digit_char)\n                .test(this.password);\n        return this.containAtLeastOneDigit;\n    }\n    _containAtLeastOneSpecialChar() {\n        this.containAtLeastOneSpecialChar =\n            this.criteriaMap\n                .get(Criteria.at_least_one_special_char)\n                .test(this.password);\n        return this.containAtLeastOneSpecialChar;\n    }\n    _containCustomChars() {\n        this.containAtCustomChars =\n            this.criteriaMap\n                .get(Criteria.at_custom_chars)\n                .test(this.password);\n        return this.containAtCustomChars;\n    }\n    ngAfterContentChecked() {\n        if (this.password) {\n            this.calculatePasswordStrength();\n        }\n    }\n}\nMatPasswordStrengthComponent.ɵfac = function MatPasswordStrengthComponent_Factory(t) { return new (t || MatPasswordStrengthComponent)(); };\nMatPasswordStrengthComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatPasswordStrengthComponent, selectors: [[\"mat-password-strength\"]], inputs: { password: \"password\", externalError: \"externalError\", enableLengthRule: \"enableLengthRule\", enableLowerCaseLetterRule: \"enableLowerCaseLetterRule\", enableUpperCaseLetterRule: \"enableUpperCaseLetterRule\", enableDigitRule: \"enableDigitRule\", enableSpecialCharRule: \"enableSpecialCharRule\", min: \"min\", max: \"max\", customValidator: \"customValidator\", warnThreshold: \"warnThreshold\", accentThreshold: \"accentThreshold\" }, outputs: { onStrengthChanged: \"onStrengthChanged\" }, exportAs: [\"matPasswordStrength\"], features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatPasswordStrengthComponent),\n                multi: true\n            }\n        ]), i0.ɵɵNgOnChangesFeature], decls: 1, vars: 2, consts: [[\"mode\", \"determinate\", 3, \"color\", \"value\"]], template: function MatPasswordStrengthComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelement(0, \"mat-progress-bar\", 0);\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"color\", ctx.color)(\"value\", ctx.strength);\n    } }, dependencies: [i1$1.MatProgressBar], styles: [\".green   [_nghost-%COMP%]  .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\"], changeDetection: 0 });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-password-strength', exportAs: 'matPasswordStrength', changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => MatPasswordStrengthComponent),\n                        multi: true\n                    }\n                ], template: \"<mat-progress-bar [color]=\\\"color\\\"\\n                  [value]=\\\"strength\\\"\\n                  mode=\\\"determinate\\\">\\n</mat-progress-bar>\\n\", styles: [\".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\\n\"] }]\n    }], null, { password: [{\n            type: Input\n        }], externalError: [{\n            type: Input\n        }], enableLengthRule: [{\n            type: Input\n        }], enableLowerCaseLetterRule: [{\n            type: Input\n        }], enableUpperCaseLetterRule: [{\n            type: Input\n        }], enableDigitRule: [{\n            type: Input\n        }], enableSpecialCharRule: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], customValidator: [{\n            type: Input\n        }], warnThreshold: [{\n            type: Input\n        }], accentThreshold: [{\n            type: Input\n        }], onStrengthChanged: [{\n            type: Output\n        }] }); })();\n\nfunction flipIn(timing, rotateX, rotateY) {\n    const params = { timing: timing, delay: 0, rotateX, rotateY };\n    return animation([\n        style({ 'backface-visibility': 'visible' }),\n        animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n            style({\n                opacity: 0,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                offset: 0,\n            }),\n            style({\n                opacity: 1,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                offset: 0.4,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                offset: 0.6,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                offset: 0.8,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                offset: 1,\n            }),\n        ])),\n    ], { params });\n}\nconst flipInX = flipIn(1, 1, 0);\nconst flipInY = flipIn(1, 0, 1);\nconst shake = animation(animate('{{ timing }}s {{ delay }}s', keyframes([\n    style({ transform: 'translate3d(0, 0, 0)', offset: 0 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.1 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.2 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.3 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.4 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.5 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.6 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.7 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.8 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.9 }),\n    style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),\n])), { params: { timing: 1, delay: 0 } });\n\nfunction MatPasswordStrengthInfoComponent_div_2_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} if (rf & 2) {\n    i0.ɵɵproperty(\"@flipY\", undefined);\n} }\nfunction MatPasswordStrengthInfoComponent_div_2_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r9 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r9.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_2_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r11.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_2_div_1_Template, 1, 1, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_2_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_2_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r8 = i0.ɵɵreference(3);\n    const _r10 = i0.ɵɵreference(5);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.passwordComponent.containAtLeastOneLowerCaseLetter)(\"ngIfThen\", _r8)(\"ngIfElse\", _r10);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r0.lowerCaseCriteriaMsg);\n} }\nfunction MatPasswordStrengthInfoComponent_div_3_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} }\nfunction MatPasswordStrengthInfoComponent_div_3_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r14 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r14.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_3_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r16 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r16.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_3_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_3_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_3_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_3_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r13 = i0.ɵɵreference(3);\n    const _r15 = i0.ɵɵreference(5);\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.passwordComponent.containAtLeastOneUpperCaseLetter)(\"ngIfThen\", _r13)(\"ngIfElse\", _r15);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r1.upperCaseCriteriaMsg);\n} }\nfunction MatPasswordStrengthInfoComponent_div_4_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} }\nfunction MatPasswordStrengthInfoComponent_div_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r19 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r19.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_4_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r21.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_4_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_4_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_4_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r18 = i0.ɵɵreference(3);\n    const _r20 = i0.ɵɵreference(5);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r2.passwordComponent.containAtLeastOneDigit)(\"ngIfThen\", _r18)(\"ngIfElse\", _r20);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r2.digitsCriteriaMsg);\n} }\nfunction MatPasswordStrengthInfoComponent_div_5_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} }\nfunction MatPasswordStrengthInfoComponent_div_5_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r24 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r24.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_5_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r26 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r26.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_5_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_5_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_5_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_5_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r23 = i0.ɵɵreference(3);\n    const _r25 = i0.ɵɵreference(5);\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r3.passwordComponent.containAtLeastOneSpecialChar)(\"ngIfThen\", _r23)(\"ngIfElse\", _r25);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r3.specialCharsCriteriaMsg);\n} }\nfunction MatPasswordStrengthInfoComponent_div_6_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} }\nfunction MatPasswordStrengthInfoComponent_div_6_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r29 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r29.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_6_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r31 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r31.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_6_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_6_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_6_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_6_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r28 = i0.ɵɵreference(3);\n    const _r30 = i0.ɵɵreference(5);\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r4.passwordComponent.containAtLeastMinChars)(\"ngIfThen\", _r28)(\"ngIfElse\", _r30);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r4.minCharsCriteriaMsg);\n} }\nfunction MatPasswordStrengthInfoComponent_div_7_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} }\nfunction MatPasswordStrengthInfoComponent_div_7_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r34 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r34.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_7_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r36 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r36.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_7_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_7_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_7_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r33 = i0.ɵɵreference(3);\n    const _r35 = i0.ɵɵreference(5);\n    const ctx_r5 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r5.passwordComponent.containAtCustomChars)(\"ngIfThen\", _r33)(\"ngIfElse\", _r35);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(ctx_r5.customCharsCriteriaMsg);\n} }\nfunction MatPasswordStrengthInfoComponent_div_8_div_1_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelement(0, \"div\");\n} }\nfunction MatPasswordStrengthInfoComponent_div_8_ng_template_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r39 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@positiveState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r39.matIconDone);\n} }\nfunction MatPasswordStrengthInfoComponent_div_8_ng_template_4_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-icon\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n} if (rf & 2) {\n    const ctx_r41 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"@negativeState\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r41.matIconError);\n} }\nfunction MatPasswordStrengthInfoComponent_div_8_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_8_div_1_Template, 1, 0, \"div\", 2);\n    i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_8_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_8_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementStart(6, \"span\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const _r38 = i0.ɵɵreference(3);\n    const _r40 = i0.ɵɵreference(5);\n    const ctx_r6 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"@items\", undefined);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r6.passwordComponent.strength === 100)(\"ngIfThen\", _r38)(\"ngIfElse\", _r40);\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate1(\"Password's strength = \", ctx_r6.passwordComponent.strength, \" %100\");\n} }\nclass MatPasswordStrengthInfoComponent {\n    constructor() {\n        this.enableScoreInfo = false;\n        this.lowerCaseCriteriaMsg = 'contains at least one lower character';\n        this.upperCaseCriteriaMsg = 'contains at least one upper character';\n        this.digitsCriteriaMsg = 'contains at least one digit character';\n        this.specialCharsCriteriaMsg = 'contains at least one special character';\n        this.customCharsCriteriaMsg = 'contains at least one custom character';\n        this.matIconDone = 'done';\n        this.matIconError = 'error';\n    }\n    ngOnInit() {\n        if (!this.minCharsCriteriaMsg) {\n            this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`;\n        }\n    }\n}\nMatPasswordStrengthInfoComponent.ɵfac = function MatPasswordStrengthInfoComponent_Factory(t) { return new (t || MatPasswordStrengthInfoComponent)(); };\nMatPasswordStrengthInfoComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatPasswordStrengthInfoComponent, selectors: [[\"mat-password-strength-info\"]], inputs: { passwordComponent: \"passwordComponent\", enableScoreInfo: \"enableScoreInfo\", lowerCaseCriteriaMsg: \"lowerCaseCriteriaMsg\", upperCaseCriteriaMsg: \"upperCaseCriteriaMsg\", digitsCriteriaMsg: \"digitsCriteriaMsg\", specialCharsCriteriaMsg: \"specialCharsCriteriaMsg\", customCharsCriteriaMsg: \"customCharsCriteriaMsg\", minCharsCriteriaMsg: \"minCharsCriteriaMsg\", matIconDone: \"matIconDone\", matIconError: \"matIconError\" }, exportAs: [\"matPasswordStrengthInfo\"], decls: 9, vars: 8, consts: [[\"class\", \"info-row\", 4, \"ngIf\"], [1, \"info-row\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"done\", \"\"], [\"error\", \"\"], [\"color\", \"primary\"], [\"color\", \"warn\"]], template: function MatPasswordStrengthInfoComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-content\");\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_2_Template, 8, 5, \"div\", 0);\n        i0.ɵɵtemplate(3, MatPasswordStrengthInfoComponent_div_3_Template, 8, 5, \"div\", 0);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_4_Template, 8, 5, \"div\", 0);\n        i0.ɵɵtemplate(5, MatPasswordStrengthInfoComponent_div_5_Template, 8, 5, \"div\", 0);\n        i0.ɵɵtemplate(6, MatPasswordStrengthInfoComponent_div_6_Template, 8, 5, \"div\", 0);\n        i0.ɵɵtemplate(7, MatPasswordStrengthInfoComponent_div_7_Template, 8, 5, \"div\", 0);\n        i0.ɵɵtemplate(8, MatPasswordStrengthInfoComponent_div_8_Template, 8, 5, \"div\", 0);\n        i0.ɵɵelementEnd()();\n    } if (rf & 2) {\n        i0.ɵɵproperty(\"@list\", undefined);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableLowerCaseLetterRule);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableUpperCaseLetterRule);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableDigitRule);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableSpecialCharRule);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableLengthRule);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.customValidator);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.enableScoreInfo);\n    } }, dependencies: [i1$2.NgIf, i2$1.MatCard, i2$1.MatCardContent, i1.MatIcon], styles: [\"mat-card[_ngcontent-%COMP%]{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin-right:10px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .info-row[_ngcontent-%COMP%]{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\"], data: { animation: [\n            // nice stagger effect when showing existing elements\n            trigger('list', [\n                transition(':enter', [\n                    // child animation selector + stagger\n                    query('@items', stagger(300, animateChild()))\n                ]),\n            ]),\n            trigger('items', [\n                // cubic-bezier for a tiny bouncing feel\n                transition(':enter', [\n                    style({ transform: 'scale(0.5)', opacity: 0 }),\n                    animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n                ]),\n                transition(':leave', [\n                    style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                    animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n                ]),\n            ]),\n            trigger('positiveState', [\n                transition(':enter', [\n                    style({ 'backface-visibility': 'visible' }),\n                    animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                        style({\n                            opacity: 0,\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                            offset: 0,\n                        }),\n                        style({\n                            opacity: 1,\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                            offset: 0.4,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                            offset: 0.6,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                            offset: 0.8,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                            offset: 1,\n                        }),\n                    ])),\n                ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n            ]),\n            trigger('negativeState', [\n                transition(':enter', useAnimation(shake)),\n            ]),\n        ] } });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthInfoComponent, [{\n        type: Component,\n        args: [{ selector: 'mat-password-strength-info', exportAs: 'matPasswordStrengthInfo', animations: [\n                    // nice stagger effect when showing existing elements\n                    trigger('list', [\n                        transition(':enter', [\n                            // child animation selector + stagger\n                            query('@items', stagger(300, animateChild()))\n                        ]),\n                    ]),\n                    trigger('items', [\n                        // cubic-bezier for a tiny bouncing feel\n                        transition(':enter', [\n                            style({ transform: 'scale(0.5)', opacity: 0 }),\n                            animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n                        ]),\n                        transition(':leave', [\n                            style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                            animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n                        ]),\n                    ]),\n                    trigger('positiveState', [\n                        transition(':enter', [\n                            style({ 'backface-visibility': 'visible' }),\n                            animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                                style({\n                                    opacity: 0,\n                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                                    offset: 0,\n                                }),\n                                style({\n                                    opacity: 1,\n                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                                    offset: 0.4,\n                                }),\n                                style({\n                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                                    offset: 0.6,\n                                }),\n                                style({\n                                    transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                                    offset: 0.8,\n                                }),\n                                style({\n                                    transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                                    offset: 1,\n                                }),\n                            ])),\n                        ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n                    ]),\n                    trigger('negativeState', [\n                        transition(':enter', useAnimation(shake)),\n                    ]),\n                ], template: \"<mat-card @list>\\n  <mat-card-content>\\n    <div *ngIf=\\\"passwordComponent.enableLowerCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\\\" @flipY>\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{lowerCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableUpperCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{upperCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableDigitRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneDigit; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{digitsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableSpecialCharRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneSpecialChar; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{specialCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableLengthRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastMinChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{minCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.customValidator\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtCustomChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{customCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"enableScoreInfo\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.strength === 100; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\\n    </div>\\n\\n  </mat-card-content>\\n</mat-card>\", styles: [\"mat-card{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card mat-card-content{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\\n\"] }]\n    }], null, { passwordComponent: [{\n            type: Input\n        }], enableScoreInfo: [{\n            type: Input\n        }], lowerCaseCriteriaMsg: [{\n            type: Input\n        }], upperCaseCriteriaMsg: [{\n            type: Input\n        }], digitsCriteriaMsg: [{\n            type: Input\n        }], specialCharsCriteriaMsg: [{\n            type: Input\n        }], customCharsCriteriaMsg: [{\n            type: Input\n        }], minCharsCriteriaMsg: [{\n            type: Input\n        }], matIconDone: [{\n            type: Input\n        }], matIconError: [{\n            type: Input\n        }] }); })();\n\nclass MatPasswordStrengthModule {\n    static forRoot() {\n        return {\n            ngModule: MatPasswordStrengthModule,\n            providers: []\n        };\n    }\n}\nMatPasswordStrengthModule.ɵfac = function MatPasswordStrengthModule_Factory(t) { return new (t || MatPasswordStrengthModule)(); };\nMatPasswordStrengthModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MatPasswordStrengthModule });\nMatPasswordStrengthModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,\n        MatProgressBarModule,\n        MatCardModule,\n        MatIconModule,\n        MatRippleModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    CommonModule,\n                    MatProgressBarModule,\n                    MatCardModule,\n                    MatIconModule,\n                    MatRippleModule\n                ],\n                exports: [\n                    MatPasswordStrengthComponent,\n                    MatPasswordStrengthInfoComponent,\n                    MatPassToggleVisibilityComponent\n                ],\n                declarations: [\n                    MatPasswordStrengthComponent,\n                    MatPasswordStrengthInfoComponent,\n                    MatPassToggleVisibilityComponent\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MatPasswordStrengthModule, { declarations: [MatPasswordStrengthComponent,\n        MatPasswordStrengthInfoComponent,\n        MatPassToggleVisibilityComponent], imports: [CommonModule,\n        MatProgressBarModule,\n        MatCardModule,\n        MatIconModule,\n        MatRippleModule], exports: [MatPasswordStrengthComponent,\n        MatPasswordStrengthInfoComponent,\n        MatPassToggleVisibilityComponent] }); })();\n\n/*\n * Public API Surface of password-strength\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Colors, Criteria, MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPasswordStrengthModule, MatPasswordStrengthValidator, RegExpValidator, flipIn, flipInX, flipInY, shake };\n//# sourceMappingURL=angular-material-extensions-password-strength.mjs.map\n//# sourceMappingURL=angular-material-extensions-password-strength.mjs.map\n","map":{"version":3,"file":"angular-material-extensions-password-strength.mjs","sources":["../../../../projects/angular-material-extensions/password-strength/src/lib/enum/colors.enum.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/enum/criteria.enum.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.html","../../../../projects/angular-material-extensions/password-strength/src/lib/validator/mat-password-strength-validator.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/validator/regexp.class.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength/mat-password-strength.component.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength/mat-password-strength.component.html","../../../../projects/angular-material-extensions/password-strength/src/lib/animations/index.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength-info/mat-password-strength-info.component.html","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength-info/mat-password-strength-info.component.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/mat-password-strength.module.ts","../../../../projects/angular-material-extensions/password-strength/src/public-api.ts","../../../../projects/angular-material-extensions/password-strength/src/angular-material-extensions-password-strength.ts"],"sourcesContent":["export enum Colors {\n  primary = 'primary',\n  accent = 'accent',\n  warn = 'warn'\n}\n","export enum Criteria {\n  at_least_eight_chars = 'minChar',\n  at_least_one_lower_case_char = 'lowerCase',\n  at_least_one_upper_case_char = 'upperCase',\n  at_least_one_digit_char = 'digit',\n  at_least_one_special_char = ' specialChar',\n  at_custom_chars = 'customChars'\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'mat-pass-toggle-visibility',\n  templateUrl: './mat-pass-toggle-visibility.component.html',\n  styleUrls: ['./mat-pass-toggle-visibility.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MatPassToggleVisibilityComponent {\n\n  @Input()\n  isVisible: boolean;\n\n  @Input()\n  tabindex?: string;\n\n  get type() {\n    return this.isVisible ? 'text' : 'password';\n  }\n\n}\n","<button\n  (click)=\"isVisible = !isVisible\"\n  class=\"mat-icon-button cdk-focused cdk-mouse-focused\"\n  mat-icon-button\n  matRipple\n  matRippleCentered=\"true\"\n  matRipple\n  [attr.tabindex]=\"tabindex ? tabindex : null\"\n  type=\"button\"\n>\n  <mat-icon>{{ isVisible ? \"visibility\" : \"visibility_off\" }}</mat-icon>\n</button>\n","import {AbstractControl, ValidatorFn} from '@angular/forms';\n\nexport class MatPasswordStrengthValidator {\n\n  isUndefinedOrEmpty(control: AbstractControl): any | undefined {\n    if (!control || !control.value || control.value.length === 0) {\n      return undefined;\n    }\n  }\n\n  validate(criteria: string, regex: RegExp): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (!regex.test(control.value)) {\n        const failed = {};\n        failed[criteria] = {\n          actualValue: control.value,\n          requiredPattern: regex\n        };\n        return failed;\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  confirm(password: string): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (control.value !== password) {\n        return {\n          notConfirmed: {\n            password: password,\n            passwordConfirmation: control.value\n          }\n        }\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n}\n","export const RegExpValidator = {\n  'lowerCase': RegExp(/^(?=.*?[a-z])/),\n  'upperCase': RegExp(/^(?=.*?[A-Z])/),\n  'digit': RegExp(/^(?=.*?[0-9])/),\n  'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {ControlValueAccessor, UntypedFormControl, NG_VALUE_ACCESSOR, ValidatorFn, Validators} from '@angular/forms';\nimport {Colors, Criteria} from '../../enum';\nimport {MatPasswordStrengthValidator} from '../../validator';\nimport {RegExpValidator} from '../../validator/regexp.class';\nimport {ThemePalette} from '@angular/material/core';\n\n\n@Component({\n  selector: 'mat-password-strength',\n  exportAs: 'matPasswordStrength',\n  templateUrl: './mat-password-strength.component.html',\n  styleUrls: ['./mat-password-strength.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatPasswordStrengthComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatPasswordStrengthComponent implements OnInit, OnChanges, AfterContentChecked, ControlValueAccessor {\n\n  @Input() password: string;\n  @Input() externalError: boolean;\n\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n\n  @Input() min = 8;\n  @Input() max = 30;\n  @Input() customValidator: RegExp;\n\n  @Input() warnThreshold = 21;\n  @Input() accentThreshold = 81;\n\n  @Output()\n  onStrengthChanged: EventEmitter<number> = new EventEmitter();\n\n  criteriaMap = new Map<Criteria, RegExp>();\n\n  containAtLeastMinChars: boolean;\n  containAtLeastOneLowerCaseLetter: boolean;\n  containAtLeastOneUpperCaseLetter: boolean;\n  containAtLeastOneDigit: boolean;\n  containAtLeastOneSpecialChar: boolean;\n  containAtCustomChars: boolean;\n\n  // TO ACCESS VIA CONTENT CHILD\n  passwordFormControl: UntypedFormControl = new UntypedFormControl();\n  passwordConfirmationFormControl: UntypedFormControl = new UntypedFormControl();\n\n  validatorsArray: ValidatorFn[] = [];\n  Validators: ValidatorFn;\n  matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n\n  private _strength = 0;\n\n  get strength(): number {\n    return this._strength ? this._strength : 0;\n  }\n\n  private _color: ThemePalette;\n\n  get color(): ThemePalette {\n\n    if (this._strength < this.warnThreshold) {\n      return Colors.warn;\n    } else if (this._strength < this.accentThreshold) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  propagateChange = (_: any) => {\n  };\n\n  ngOnInit(): void {\n    this.setRulesAndValidators();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n      this.calculatePasswordStrength();\n    } else {\n      this.password && this.password.length > 0 ?\n        this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  parseCustomValidatorsRegex(value: string | RegExp = this.customValidator) {\n    if (this.customValidator instanceof RegExp) {\n      return this.customValidator;\n    } else if (typeof this.customValidator === 'string') {\n      return RegExp(this.customValidator);\n    }\n  }\n\n  setRulesAndValidators(): void {\n    this.validatorsArray = [];\n    this.criteriaMap = new Map<Criteria, RegExp>();\n    this.passwordConfirmationFormControl\n      .setValidators(Validators.compose([\n        Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n      ]));\n    this.validatorsArray.push(Validators.required);\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n      this.validatorsArray.push(Validators.minLength(this.min));\n      this.validatorsArray.push(Validators.maxLength(this.max));\n    }\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n    }\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n    }\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n    }\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n    }\n    if (this.customValidator) {\n      this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n      this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n    }\n\n    this.criteriaMap.forEach((value: any, key: string) => {\n      this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n    });\n\n    this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n    this.Validators = Validators.compose([...this.validatorsArray]);\n\n  }\n\n  calculatePasswordStrength(): void {\n    const requirements: Array<boolean> = [];\n    const unit = 100 / this.criteriaMap.size;\n\n    // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(\n      this.enableLengthRule ? this._containAtLeastMinChars() : false,\n      this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false,\n      this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false,\n      this.enableDigitRule ? this._containAtLeastOneDigit() : false,\n      this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false,\n      this.customValidator ? this._containCustomChars() : false\n    );\n\n    this._strength = requirements.filter(v => v).length * unit;\n    this.propagateChange(this.strength);\n    // console.log('length = ', this._strength / unit);\n    this.onStrengthChanged.emit(this.strength);\n    this.setRulesAndValidators();\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastMinChars =\n      this.containAtLeastOneLowerCaseLetter =\n        this.containAtLeastOneUpperCaseLetter =\n          this.containAtLeastOneDigit =\n            this.containAtCustomChars =\n              this.containAtLeastOneSpecialChar = false;\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this._strength = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    // throw new Error(\"Method not implemented.\");\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    // throw new Error(\"Method not implemented.\");\n  }\n\n  private _containAtLeastMinChars(): boolean {\n    this.containAtLeastMinChars = this.password.length >= this.min;\n    return this.containAtLeastMinChars;\n  }\n\n  private _containAtLeastOneLowerCaseLetter(): boolean {\n    this.containAtLeastOneLowerCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_lower_case_char)\n        .test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  private _containAtLeastOneUpperCaseLetter(): boolean {\n    this.containAtLeastOneUpperCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_upper_case_char)\n        .test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  private _containAtLeastOneDigit(): boolean {\n    this.containAtLeastOneDigit =\n      this.criteriaMap\n        .get(Criteria.at_least_one_digit_char)\n        .test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  private _containAtLeastOneSpecialChar(): boolean {\n    this.containAtLeastOneSpecialChar =\n      this.criteriaMap\n        .get(Criteria.at_least_one_special_char)\n        .test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  private _containCustomChars(): boolean {\n    this.containAtCustomChars =\n      this.criteriaMap\n        .get(Criteria.at_custom_chars)\n        .test(this.password);\n    return this.containAtCustomChars;\n  }\n\n  ngAfterContentChecked(): void {\n    if (this.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n}\n","<mat-progress-bar [color]=\"color\"\n                  [value]=\"strength\"\n                  mode=\"determinate\">\n</mat-progress-bar>\n","import {animate, animation, AnimationReferenceMetadata, keyframes, style} from '@angular/animations';\n\nexport function flipIn(timing: number, rotateX: number, rotateY: number): AnimationReferenceMetadata {\n  const params = {timing: timing, delay: 0, rotateX, rotateY};\n\n  return animation(\n    [\n      style({'backface-visibility': 'visible'}),\n      animate(\n        '{{ timing }}s {{ delay }}s ease-in',\n        keyframes([\n          style({\n            opacity: 0,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n            offset: 0,\n          }),\n          style({\n            opacity: 1,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n            offset: 0.4,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n            offset: 0.6,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n            offset: 0.8,\n          }),\n          style({\n            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n            offset: 1,\n          }),\n        ])\n      ),\n    ],\n    {params}\n  );\n}\n\nexport const flipInX = flipIn(1, 1, 0);\nexport const flipInY = flipIn(1, 0, 1);\n\nexport const shake = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({transform: 'translate3d(0, 0, 0)', offset: 0}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.1}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.2}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.3}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.4}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.5}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.6}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.7}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.8}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.9}),\n      style({transform: 'translate3d(0, 0, 0)', offset: 1}),\n    ])\n  ),\n  {params: {timing: 1, delay: 0}}\n);\n","<mat-card @list>\n  <mat-card-content>\n    <div *ngIf=\"passwordComponent.enableLowerCaseLetterRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\" @flipY>\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{lowerCaseCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableUpperCaseLetterRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{upperCaseCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableDigitRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneDigit; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{digitsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableSpecialCharRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneSpecialChar; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{specialCharsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableLengthRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastMinChars; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{minCharsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.customValidator\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtCustomChars; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{customCharsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"enableScoreInfo\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.strength === 100; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\n    </div>\n\n  </mat-card-content>\n</mat-card>","import {Component, Input, OnInit} from '@angular/core';\nimport {MatPasswordStrengthComponent} from '../mat-password-strength/mat-password-strength.component';\nimport {animate, animateChild, keyframes, query, stagger, style, transition, trigger, useAnimation} from '@angular/animations';\nimport {shake} from '../../animations/index';\n\n@Component({\n  selector: 'mat-password-strength-info',\n  exportAs: 'matPasswordStrengthInfo',\n  templateUrl: './mat-password-strength-info.component.html',\n  styleUrls: ['./mat-password-strength-info.component.scss'],\n  animations: [\n    // nice stagger effect when showing existing elements\n    trigger('list', [\n      transition(':enter', [\n        // child animation selector + stagger\n        query('@items',\n          stagger(300, animateChild())\n        )\n      ]),\n    ]),\n    trigger('items', [\n      // cubic-bezier for a tiny bouncing feel\n      transition(':enter', [\n        style({transform: 'scale(0.5)', opacity: 0}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(1)', opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'scale(1)', opacity: 1, height: '*'}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px'}))\n      ]),\n    ]),\n    trigger('positiveState', [\n      transition(':enter', [\n        style({'backface-visibility': 'visible'}),\n        animate(\n          '{{ timing }}s {{ delay }}s ease-in',\n          keyframes([\n            style({\n              opacity: 0,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n              offset: 0,\n            }),\n            style({\n              opacity: 1,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n              offset: 0.4,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n              offset: 0.6,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n              offset: 0.8,\n            }),\n            style({\n              transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n              offset: 1,\n            }),\n          ])\n        ),\n      ], {params: {timing: 1, delay: 0, rotateX: 1, rotateY: 0}}),\n    ]),\n    trigger('negativeState', [\n      transition(':enter', useAnimation(shake)),\n    ]),\n  ],\n})\nexport class MatPasswordStrengthInfoComponent implements OnInit {\n\n  @Input()\n  passwordComponent: MatPasswordStrengthComponent;\n\n  @Input()\n  enableScoreInfo = false;\n\n  @Input()\n  lowerCaseCriteriaMsg = 'contains at least one lower character';\n\n  @Input()\n  upperCaseCriteriaMsg = 'contains at least one upper character';\n\n  @Input()\n  digitsCriteriaMsg = 'contains at least one digit character';\n\n  @Input()\n  specialCharsCriteriaMsg = 'contains at least one special character';\n\n  @Input()\n  customCharsCriteriaMsg = 'contains at least one custom character';\n\n  @Input()\n  minCharsCriteriaMsg: string;\n\n  @Input()\n  matIconDone = 'done';\n\n  @Input()\n  matIconError = 'error';\n\n  ngOnInit(): void {\n    if (!this.minCharsCriteriaMsg) {\n      this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`\n    }\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent} from './component';\n\n// validator\nexport {RegExpValidator} from './validator/regexp.class';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatRippleModule\n  ],\n  exports: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  declarations: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ]\n})\nexport class MatPasswordStrengthModule {\n  static forRoot(): ModuleWithProviders<MatPasswordStrengthModule> {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n}\n","/*\n * Public API Surface of password-strength\n */\n\nexport * from './lib/enum';\nexport * from './lib/component';\nexport * from './lib/animations';\nexport * from './lib/validator';\nexport * from './lib/mat-password-strength.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2","i3"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, Input, EventEmitter, forwardRef, ChangeDetectionStrategy, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/material/icon';\nimport { MatIconModule } from '@angular/material/icon';\nimport * as i2 from '@angular/material/core';\nimport { MatRippleModule } from '@angular/material/core';\nimport { UntypedFormControl, Validators, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i1$1 from '@angular/material/progress-bar';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { animation, style, animate, keyframes, trigger, transition, query, stagger, animateChild, useAnimation } from '@angular/animations';\nimport * as i1$2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2$1 from '@angular/material/card';\nimport { MatCardModule } from '@angular/material/card';\n\nvar Colors;\n(function (Colors) {\n    Colors[\"primary\"] = \"primary\";\n    Colors[\"accent\"] = \"accent\";\n    Colors[\"warn\"] = \"warn\";\n})(Colors || (Colors = {}));\n\nvar Criteria;\n(function (Criteria) {\n    Criteria[\"at_least_eight_chars\"] = \"minChar\";\n    Criteria[\"at_least_one_lower_case_char\"] = \"lowerCase\";\n    Criteria[\"at_least_one_upper_case_char\"] = \"upperCase\";\n    Criteria[\"at_least_one_digit_char\"] = \"digit\";\n    Criteria[\"at_least_one_special_char\"] = \" specialChar\";\n    Criteria[\"at_custom_chars\"] = \"customChars\";\n})(Criteria || (Criteria = {}));\n\nclass MatPassToggleVisibilityComponent {\n    get type() {\n        return this.isVisible ? 'text' : 'password';\n    }\n}\nMatPassToggleVisibilityComponent.ɵfac = function MatPassToggleVisibilityComponent_Factory(t) { return new (t || MatPassToggleVisibilityComponent)(); };\nMatPassToggleVisibilityComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatPassToggleVisibilityComponent, selectors: [[\"mat-pass-toggle-visibility\"]], inputs: { isVisible: \"isVisible\", tabindex: \"tabindex\" }, decls: 3, vars: 2, consts: [[\"mat-icon-button\", \"\", \"matRipple\", \"\", \"matRippleCentered\", \"true\", \"matRipple\", \"\", \"type\", \"button\", 1, \"mat-icon-button\", \"cdk-focused\", \"cdk-mouse-focused\", 3, \"click\"]], template: function MatPassToggleVisibilityComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"button\", 0);\n            i0.ɵɵlistener(\"click\", function MatPassToggleVisibilityComponent_Template_button_click_0_listener() { return ctx.isVisible = !ctx.isVisible; });\n            i0.ɵɵelementStart(1, \"mat-icon\");\n            i0.ɵɵtext(2);\n            i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n            i0.ɵɵattribute(\"tabindex\", ctx.tabindex ? ctx.tabindex : null);\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.isVisible ? \"visibility\" : \"visibility_off\");\n        }\n    }, dependencies: [i1.MatIcon, i2.MatRipple], encapsulation: 2 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPassToggleVisibilityComponent, [{\n            type: Component,\n            args: [{ selector: 'mat-pass-toggle-visibility', encapsulation: ViewEncapsulation.None, template: \"<button\\n  (click)=\\\"isVisible = !isVisible\\\"\\n  class=\\\"mat-icon-button cdk-focused cdk-mouse-focused\\\"\\n  mat-icon-button\\n  matRipple\\n  matRippleCentered=\\\"true\\\"\\n  matRipple\\n  [attr.tabindex]=\\\"tabindex ? tabindex : null\\\"\\n  type=\\\"button\\\"\\n>\\n  <mat-icon>{{ isVisible ? \\\"visibility\\\" : \\\"visibility_off\\\" }}</mat-icon>\\n</button>\\n\" }]\n        }], null, { isVisible: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }] });\n})();\n\nclass MatPasswordStrengthValidator {\n    isUndefinedOrEmpty(control) {\n        if (!control || !control.value || control.value.length === 0) {\n            return undefined;\n        }\n    }\n    validate(criteria, regex) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (!regex.test(control.value)) {\n                const failed = {};\n                failed[criteria] = {\n                    actualValue: control.value,\n                    requiredPattern: regex\n                };\n                return failed;\n            }\n            return undefined;\n        };\n        return validator;\n    }\n    confirm(password) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (control.value !== password) {\n                return {\n                    notConfirmed: {\n                        password: password,\n                        passwordConfirmation: control.value\n                    }\n                };\n            }\n            return undefined;\n        };\n        return validator;\n    }\n}\n\nconst RegExpValidator = {\n    'lowerCase': RegExp(/^(?=.*?[a-z])/),\n    'upperCase': RegExp(/^(?=.*?[A-Z])/),\n    'digit': RegExp(/^(?=.*?[0-9])/),\n    'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n\nclass MatPasswordStrengthComponent {\n    constructor() {\n        this.enableLengthRule = true;\n        this.enableLowerCaseLetterRule = true;\n        this.enableUpperCaseLetterRule = true;\n        this.enableDigitRule = true;\n        this.enableSpecialCharRule = true;\n        this.min = 8;\n        this.max = 30;\n        this.warnThreshold = 21;\n        this.accentThreshold = 81;\n        this.onStrengthChanged = new EventEmitter();\n        this.criteriaMap = new Map();\n        // TO ACCESS VIA CONTENT CHILD\n        this.passwordFormControl = new UntypedFormControl();\n        this.passwordConfirmationFormControl = new UntypedFormControl();\n        this.validatorsArray = [];\n        this.matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n        this._strength = 0;\n        this.propagateChange = (_) => {\n        };\n    }\n    get strength() {\n        return this._strength ? this._strength : 0;\n    }\n    get color() {\n        if (this._strength < this.warnThreshold) {\n            return Colors.warn;\n        }\n        else if (this._strength < this.accentThreshold) {\n            return Colors.accent;\n        }\n        else {\n            return Colors.primary;\n        }\n    }\n    ngOnInit() {\n        this.setRulesAndValidators();\n    }\n    ngOnChanges(changes) {\n        if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n            return;\n        }\n        else if (changes.externalError && changes.externalError.currentValue) {\n            this._color = Colors.warn;\n            return;\n        }\n        else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n            this.calculatePasswordStrength();\n        }\n        else {\n            this.password && this.password.length > 0 ?\n                this.calculatePasswordStrength() : this.reset();\n        }\n    }\n    parseCustomValidatorsRegex(value = this.customValidator) {\n        if (this.customValidator instanceof RegExp) {\n            return this.customValidator;\n        }\n        else if (typeof this.customValidator === 'string') {\n            return RegExp(this.customValidator);\n        }\n    }\n    setRulesAndValidators() {\n        this.validatorsArray = [];\n        this.criteriaMap = new Map();\n        this.passwordConfirmationFormControl\n            .setValidators(Validators.compose([\n            Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n        ]));\n        this.validatorsArray.push(Validators.required);\n        if (this.enableLengthRule) {\n            this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n            this.validatorsArray.push(Validators.minLength(this.min));\n            this.validatorsArray.push(Validators.maxLength(this.max));\n        }\n        if (this.enableLowerCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n        }\n        if (this.enableUpperCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n        }\n        if (this.enableDigitRule) {\n            this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n        }\n        if (this.enableSpecialCharRule) {\n            this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n        }\n        if (this.customValidator) {\n            this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n            this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n        }\n        this.criteriaMap.forEach((value, key) => {\n            this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n        });\n        this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n        this.Validators = Validators.compose([...this.validatorsArray]);\n    }\n    calculatePasswordStrength() {\n        const requirements = [];\n        const unit = 100 / this.criteriaMap.size;\n        // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n        // console.log('unit = ', unit);\n        requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false, this.customValidator ? this._containCustomChars() : false);\n        this._strength = requirements.filter(v => v).length * unit;\n        this.propagateChange(this.strength);\n        // console.log('length = ', this._strength / unit);\n        this.onStrengthChanged.emit(this.strength);\n        this.setRulesAndValidators();\n    }\n    reset() {\n        this._strength = 0;\n        this.containAtLeastMinChars =\n            this.containAtLeastOneLowerCaseLetter =\n                this.containAtLeastOneUpperCaseLetter =\n                    this.containAtLeastOneDigit =\n                        this.containAtCustomChars =\n                            this.containAtLeastOneSpecialChar = false;\n    }\n    writeValue(obj) {\n        if (obj) {\n            this._strength = obj;\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        // throw new Error(\"Method not implemented.\");\n    }\n    setDisabledState(isDisabled) {\n        // throw new Error(\"Method not implemented.\");\n    }\n    _containAtLeastMinChars() {\n        this.containAtLeastMinChars = this.password.length >= this.min;\n        return this.containAtLeastMinChars;\n    }\n    _containAtLeastOneLowerCaseLetter() {\n        this.containAtLeastOneLowerCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_lower_case_char)\n                .test(this.password);\n        return this.containAtLeastOneLowerCaseLetter;\n    }\n    _containAtLeastOneUpperCaseLetter() {\n        this.containAtLeastOneUpperCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_upper_case_char)\n                .test(this.password);\n        return this.containAtLeastOneUpperCaseLetter;\n    }\n    _containAtLeastOneDigit() {\n        this.containAtLeastOneDigit =\n            this.criteriaMap\n                .get(Criteria.at_least_one_digit_char)\n                .test(this.password);\n        return this.containAtLeastOneDigit;\n    }\n    _containAtLeastOneSpecialChar() {\n        this.containAtLeastOneSpecialChar =\n            this.criteriaMap\n                .get(Criteria.at_least_one_special_char)\n                .test(this.password);\n        return this.containAtLeastOneSpecialChar;\n    }\n    _containCustomChars() {\n        this.containAtCustomChars =\n            this.criteriaMap\n                .get(Criteria.at_custom_chars)\n                .test(this.password);\n        return this.containAtCustomChars;\n    }\n    ngAfterContentChecked() {\n        if (this.password) {\n            this.calculatePasswordStrength();\n        }\n    }\n}\nMatPasswordStrengthComponent.ɵfac = function MatPasswordStrengthComponent_Factory(t) { return new (t || MatPasswordStrengthComponent)(); };\nMatPasswordStrengthComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatPasswordStrengthComponent, selectors: [[\"mat-password-strength\"]], inputs: { password: \"password\", externalError: \"externalError\", enableLengthRule: \"enableLengthRule\", enableLowerCaseLetterRule: \"enableLowerCaseLetterRule\", enableUpperCaseLetterRule: \"enableUpperCaseLetterRule\", enableDigitRule: \"enableDigitRule\", enableSpecialCharRule: \"enableSpecialCharRule\", min: \"min\", max: \"max\", customValidator: \"customValidator\", warnThreshold: \"warnThreshold\", accentThreshold: \"accentThreshold\" }, outputs: { onStrengthChanged: \"onStrengthChanged\" }, exportAs: [\"matPasswordStrength\"], features: [i0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => MatPasswordStrengthComponent),\n                multi: true\n            }\n        ]), i0.ɵɵNgOnChangesFeature], decls: 1, vars: 2, consts: [[\"mode\", \"determinate\", 3, \"color\", \"value\"]], template: function MatPasswordStrengthComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelement(0, \"mat-progress-bar\", 0);\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"color\", ctx.color)(\"value\", ctx.strength);\n        }\n    }, dependencies: [i1$1.MatProgressBar], styles: [\".green   [_nghost-%COMP%]  .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\"], changeDetection: 0 });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthComponent, [{\n            type: Component,\n            args: [{ selector: 'mat-password-strength', exportAs: 'matPasswordStrength', changeDetection: ChangeDetectionStrategy.OnPush, providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: forwardRef(() => MatPasswordStrengthComponent),\n                            multi: true\n                        }\n                    ], template: \"<mat-progress-bar [color]=\\\"color\\\"\\n                  [value]=\\\"strength\\\"\\n                  mode=\\\"determinate\\\">\\n</mat-progress-bar>\\n\", styles: [\".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill:after{background-color:#43a047}\\n\"] }]\n        }], null, { password: [{\n                type: Input\n            }], externalError: [{\n                type: Input\n            }], enableLengthRule: [{\n                type: Input\n            }], enableLowerCaseLetterRule: [{\n                type: Input\n            }], enableUpperCaseLetterRule: [{\n                type: Input\n            }], enableDigitRule: [{\n                type: Input\n            }], enableSpecialCharRule: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], customValidator: [{\n                type: Input\n            }], warnThreshold: [{\n                type: Input\n            }], accentThreshold: [{\n                type: Input\n            }], onStrengthChanged: [{\n                type: Output\n            }] });\n})();\n\nfunction flipIn(timing, rotateX, rotateY) {\n    const params = { timing: timing, delay: 0, rotateX, rotateY };\n    return animation([\n        style({ 'backface-visibility': 'visible' }),\n        animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n            style({\n                opacity: 0,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                offset: 0,\n            }),\n            style({\n                opacity: 1,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                offset: 0.4,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                offset: 0.6,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                offset: 0.8,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                offset: 1,\n            }),\n        ])),\n    ], { params });\n}\nconst flipInX = flipIn(1, 1, 0);\nconst flipInY = flipIn(1, 0, 1);\nconst shake = animation(animate('{{ timing }}s {{ delay }}s', keyframes([\n    style({ transform: 'translate3d(0, 0, 0)', offset: 0 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.1 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.2 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.3 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.4 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.5 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.6 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.7 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.8 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.9 }),\n    style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),\n])), { params: { timing: 1, delay: 0 } });\n\nfunction MatPasswordStrengthInfoComponent_div_2_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n    if (rf & 2) {\n        i0.ɵɵproperty(\"@flipY\", undefined);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_2_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r9 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r9.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_2_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r11 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r11.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_2_div_1_Template, 1, 1, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_2_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_2_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r8 = i0.ɵɵreference(3);\n        const _r10 = i0.ɵɵreference(5);\n        const ctx_r0 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r0.passwordComponent.containAtLeastOneLowerCaseLetter)(\"ngIfThen\", _r8)(\"ngIfElse\", _r10);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx_r0.lowerCaseCriteriaMsg);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_3_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_3_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r14 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r14.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_3_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r16 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r16.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_3_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_3_div_1_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_3_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_3_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r13 = i0.ɵɵreference(3);\n        const _r15 = i0.ɵɵreference(5);\n        const ctx_r1 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r1.passwordComponent.containAtLeastOneUpperCaseLetter)(\"ngIfThen\", _r13)(\"ngIfElse\", _r15);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx_r1.upperCaseCriteriaMsg);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_4_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_4_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r19 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r19.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_4_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r21 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r21.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_4_div_1_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_4_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_4_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r18 = i0.ɵɵreference(3);\n        const _r20 = i0.ɵɵreference(5);\n        const ctx_r2 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r2.passwordComponent.containAtLeastOneDigit)(\"ngIfThen\", _r18)(\"ngIfElse\", _r20);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx_r2.digitsCriteriaMsg);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_5_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_5_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r24 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r24.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_5_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r26 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r26.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_5_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_5_div_1_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_5_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_5_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r23 = i0.ɵɵreference(3);\n        const _r25 = i0.ɵɵreference(5);\n        const ctx_r3 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r3.passwordComponent.containAtLeastOneSpecialChar)(\"ngIfThen\", _r23)(\"ngIfElse\", _r25);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx_r3.specialCharsCriteriaMsg);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_6_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_6_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r29 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r29.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_6_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r31 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r31.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_6_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_6_div_1_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_6_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_6_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r28 = i0.ɵɵreference(3);\n        const _r30 = i0.ɵɵreference(5);\n        const ctx_r4 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r4.passwordComponent.containAtLeastMinChars)(\"ngIfThen\", _r28)(\"ngIfElse\", _r30);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx_r4.minCharsCriteriaMsg);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_7_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_7_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r34 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r34.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_7_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r36 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r36.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_7_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_7_div_1_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_7_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_7_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r33 = i0.ɵɵreference(3);\n        const _r35 = i0.ɵɵreference(5);\n        const ctx_r5 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r5.passwordComponent.containAtCustomChars)(\"ngIfThen\", _r33)(\"ngIfElse\", _r35);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx_r5.customCharsCriteriaMsg);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_8_div_1_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelement(0, \"div\");\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_8_ng_template_2_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 5);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r39 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@positiveState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r39.matIconDone);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_8_ng_template_4_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-icon\", 6);\n        i0.ɵɵtext(1);\n        i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n        const ctx_r41 = i0.ɵɵnextContext(2);\n        i0.ɵɵproperty(\"@negativeState\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx_r41.matIconError);\n    }\n}\nfunction MatPasswordStrengthInfoComponent_div_8_Template(rf, ctx) {\n    if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 1);\n        i0.ɵɵtemplate(1, MatPasswordStrengthInfoComponent_div_8_div_1_Template, 1, 0, \"div\", 2);\n        i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_8_ng_template_2_Template, 2, 2, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_8_ng_template_4_Template, 2, 2, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementStart(6, \"span\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n        const _r38 = i0.ɵɵreference(3);\n        const _r40 = i0.ɵɵreference(5);\n        const ctx_r6 = i0.ɵɵnextContext();\n        i0.ɵɵproperty(\"@items\", undefined);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx_r6.passwordComponent.strength === 100)(\"ngIfThen\", _r38)(\"ngIfElse\", _r40);\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\"Password's strength = \", ctx_r6.passwordComponent.strength, \" %100\");\n    }\n}\nclass MatPasswordStrengthInfoComponent {\n    constructor() {\n        this.enableScoreInfo = false;\n        this.lowerCaseCriteriaMsg = 'contains at least one lower character';\n        this.upperCaseCriteriaMsg = 'contains at least one upper character';\n        this.digitsCriteriaMsg = 'contains at least one digit character';\n        this.specialCharsCriteriaMsg = 'contains at least one special character';\n        this.customCharsCriteriaMsg = 'contains at least one custom character';\n        this.matIconDone = 'done';\n        this.matIconError = 'error';\n    }\n    ngOnInit() {\n        if (!this.minCharsCriteriaMsg) {\n            this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`;\n        }\n    }\n}\nMatPasswordStrengthInfoComponent.ɵfac = function MatPasswordStrengthInfoComponent_Factory(t) { return new (t || MatPasswordStrengthInfoComponent)(); };\nMatPasswordStrengthInfoComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: MatPasswordStrengthInfoComponent, selectors: [[\"mat-password-strength-info\"]], inputs: { passwordComponent: \"passwordComponent\", enableScoreInfo: \"enableScoreInfo\", lowerCaseCriteriaMsg: \"lowerCaseCriteriaMsg\", upperCaseCriteriaMsg: \"upperCaseCriteriaMsg\", digitsCriteriaMsg: \"digitsCriteriaMsg\", specialCharsCriteriaMsg: \"specialCharsCriteriaMsg\", customCharsCriteriaMsg: \"customCharsCriteriaMsg\", minCharsCriteriaMsg: \"minCharsCriteriaMsg\", matIconDone: \"matIconDone\", matIconError: \"matIconError\" }, exportAs: [\"matPasswordStrengthInfo\"], decls: 9, vars: 8, consts: [[\"class\", \"info-row\", 4, \"ngIf\"], [1, \"info-row\"], [4, \"ngIf\", \"ngIfThen\", \"ngIfElse\"], [\"done\", \"\"], [\"error\", \"\"], [\"color\", \"primary\"], [\"color\", \"warn\"]], template: function MatPasswordStrengthInfoComponent_Template(rf, ctx) {\n        if (rf & 1) {\n            i0.ɵɵelementStart(0, \"mat-card\")(1, \"mat-card-content\");\n            i0.ɵɵtemplate(2, MatPasswordStrengthInfoComponent_div_2_Template, 8, 5, \"div\", 0);\n            i0.ɵɵtemplate(3, MatPasswordStrengthInfoComponent_div_3_Template, 8, 5, \"div\", 0);\n            i0.ɵɵtemplate(4, MatPasswordStrengthInfoComponent_div_4_Template, 8, 5, \"div\", 0);\n            i0.ɵɵtemplate(5, MatPasswordStrengthInfoComponent_div_5_Template, 8, 5, \"div\", 0);\n            i0.ɵɵtemplate(6, MatPasswordStrengthInfoComponent_div_6_Template, 8, 5, \"div\", 0);\n            i0.ɵɵtemplate(7, MatPasswordStrengthInfoComponent_div_7_Template, 8, 5, \"div\", 0);\n            i0.ɵɵtemplate(8, MatPasswordStrengthInfoComponent_div_8_Template, 8, 5, \"div\", 0);\n            i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n            i0.ɵɵproperty(\"@list\", undefined);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableLowerCaseLetterRule);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableUpperCaseLetterRule);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableDigitRule);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableSpecialCharRule);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.enableLengthRule);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.passwordComponent.customValidator);\n            i0.ɵɵadvance(1);\n            i0.ɵɵproperty(\"ngIf\", ctx.enableScoreInfo);\n        }\n    }, dependencies: [i1$2.NgIf, i2$1.MatCard, i2$1.MatCardContent, i1.MatIcon], styles: [\"mat-card[_ngcontent-%COMP%]{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{margin-right:10px}mat-card[_ngcontent-%COMP%]   mat-card-content[_ngcontent-%COMP%]   .info-row[_ngcontent-%COMP%]{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\"], data: { animation: [\n            // nice stagger effect when showing existing elements\n            trigger('list', [\n                transition(':enter', [\n                    // child animation selector + stagger\n                    query('@items', stagger(300, animateChild()))\n                ]),\n            ]),\n            trigger('items', [\n                // cubic-bezier for a tiny bouncing feel\n                transition(':enter', [\n                    style({ transform: 'scale(0.5)', opacity: 0 }),\n                    animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n                ]),\n                transition(':leave', [\n                    style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                    animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n                ]),\n            ]),\n            trigger('positiveState', [\n                transition(':enter', [\n                    style({ 'backface-visibility': 'visible' }),\n                    animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                        style({\n                            opacity: 0,\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                            offset: 0,\n                        }),\n                        style({\n                            opacity: 1,\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                            offset: 0.4,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                            offset: 0.6,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                            offset: 0.8,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                            offset: 1,\n                        }),\n                    ])),\n                ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n            ]),\n            trigger('negativeState', [\n                transition(':enter', useAnimation(shake)),\n            ]),\n        ] } });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthInfoComponent, [{\n            type: Component,\n            args: [{ selector: 'mat-password-strength-info', exportAs: 'matPasswordStrengthInfo', animations: [\n                        // nice stagger effect when showing existing elements\n                        trigger('list', [\n                            transition(':enter', [\n                                // child animation selector + stagger\n                                query('@items', stagger(300, animateChild()))\n                            ]),\n                        ]),\n                        trigger('items', [\n                            // cubic-bezier for a tiny bouncing feel\n                            transition(':enter', [\n                                style({ transform: 'scale(0.5)', opacity: 0 }),\n                                animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n                            ]),\n                            transition(':leave', [\n                                style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                                animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n                            ]),\n                        ]),\n                        trigger('positiveState', [\n                            transition(':enter', [\n                                style({ 'backface-visibility': 'visible' }),\n                                animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                                    style({\n                                        opacity: 0,\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                                        offset: 0,\n                                    }),\n                                    style({\n                                        opacity: 1,\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                                        offset: 0.4,\n                                    }),\n                                    style({\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                                        offset: 0.6,\n                                    }),\n                                    style({\n                                        transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                                        offset: 0.8,\n                                    }),\n                                    style({\n                                        transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                                        offset: 1,\n                                    }),\n                                ])),\n                            ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n                        ]),\n                        trigger('negativeState', [\n                            transition(':enter', useAnimation(shake)),\n                        ]),\n                    ], template: \"<mat-card @list>\\n  <mat-card-content>\\n    <div *ngIf=\\\"passwordComponent.enableLowerCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\\\" @flipY>\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{lowerCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableUpperCaseLetterRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{upperCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableDigitRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneDigit; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{digitsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableSpecialCharRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneSpecialChar; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{specialCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.enableLengthRule\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastMinChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{minCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"passwordComponent.customValidator\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtCustomChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>{{customCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"enableScoreInfo\\\" @items class=\\\"info-row\\\">\\n      <div *ngIf=\\\"passwordComponent.strength === 100; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">{{matIconDone}}</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">{{matIconError}}</mat-icon>\\n      </ng-template>\\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\\n    </div>\\n\\n  </mat-card-content>\\n</mat-card>\", styles: [\"mat-card{flex-direction:row;box-sizing:border-box;display:flex;place-content:stretch center;align-items:stretch;flex:1 1 0}mat-card mat-card-content{flex-direction:column;box-sizing:border-box;display:flex;max-width:100%;place-content:stretch flex-start;align-items:stretch}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{flex-direction:row;box-sizing:border-box;display:flex;align-items:center}\\n\"] }]\n        }], null, { passwordComponent: [{\n                type: Input\n            }], enableScoreInfo: [{\n                type: Input\n            }], lowerCaseCriteriaMsg: [{\n                type: Input\n            }], upperCaseCriteriaMsg: [{\n                type: Input\n            }], digitsCriteriaMsg: [{\n                type: Input\n            }], specialCharsCriteriaMsg: [{\n                type: Input\n            }], customCharsCriteriaMsg: [{\n                type: Input\n            }], minCharsCriteriaMsg: [{\n                type: Input\n            }], matIconDone: [{\n                type: Input\n            }], matIconError: [{\n                type: Input\n            }] });\n})();\n\nclass MatPasswordStrengthModule {\n    static forRoot() {\n        return {\n            ngModule: MatPasswordStrengthModule,\n            providers: []\n        };\n    }\n}\nMatPasswordStrengthModule.ɵfac = function MatPasswordStrengthModule_Factory(t) { return new (t || MatPasswordStrengthModule)(); };\nMatPasswordStrengthModule.ɵmod = /*@__PURE__*/ i0.ɵɵdefineNgModule({ type: MatPasswordStrengthModule });\nMatPasswordStrengthModule.ɵinj = /*@__PURE__*/ i0.ɵɵdefineInjector({ imports: [CommonModule,\n        MatProgressBarModule,\n        MatCardModule,\n        MatIconModule,\n        MatRippleModule] });\n(function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatPasswordStrengthModule, [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        MatProgressBarModule,\n                        MatCardModule,\n                        MatIconModule,\n                        MatRippleModule\n                    ],\n                    exports: [\n                        MatPasswordStrengthComponent,\n                        MatPasswordStrengthInfoComponent,\n                        MatPassToggleVisibilityComponent\n                    ],\n                    declarations: [\n                        MatPasswordStrengthComponent,\n                        MatPasswordStrengthInfoComponent,\n                        MatPassToggleVisibilityComponent\n                    ]\n                }]\n        }], null, null);\n})();\n(function () {\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(MatPasswordStrengthModule, { declarations: [MatPasswordStrengthComponent,\n            MatPasswordStrengthInfoComponent,\n            MatPassToggleVisibilityComponent], imports: [CommonModule,\n            MatProgressBarModule,\n            MatCardModule,\n            MatIconModule,\n            MatRippleModule], exports: [MatPasswordStrengthComponent,\n            MatPasswordStrengthInfoComponent,\n            MatPassToggleVisibilityComponent] });\n})();\n\n/*\n * Public API Surface of password-strength\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Colors, Criteria, MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPasswordStrengthModule, MatPasswordStrengthValidator, RegExpValidator, flipIn, flipInX, flipInY, shake };\n//# sourceMappingURL=angular-material-extensions-password-strength.mjs.map\n//# sourceMappingURL=angular-material-extensions-password-strength.mjs.map\n","map":{"version":3,"file":"angular-material-extensions-password-strength.mjs","sources":["../../../../projects/angular-material-extensions/password-strength/src/lib/enum/colors.enum.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/enum/criteria.enum.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-pass-toggle-visibility/mat-pass-toggle-visibility.component.html","../../../../projects/angular-material-extensions/password-strength/src/lib/validator/mat-password-strength-validator.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/validator/regexp.class.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength/mat-password-strength.component.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength/mat-password-strength.component.html","../../../../projects/angular-material-extensions/password-strength/src/lib/animations/index.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength-info/mat-password-strength-info.component.html","../../../../projects/angular-material-extensions/password-strength/src/lib/component/mat-password-strength-info/mat-password-strength-info.component.ts","../../../../projects/angular-material-extensions/password-strength/src/lib/mat-password-strength.module.ts","../../../../projects/angular-material-extensions/password-strength/src/public-api.ts","../../../../projects/angular-material-extensions/password-strength/src/angular-material-extensions-password-strength.ts"],"sourcesContent":["export enum Colors {\n  primary = 'primary',\n  accent = 'accent',\n  warn = 'warn'\n}\n","export enum Criteria {\n  at_least_eight_chars = 'minChar',\n  at_least_one_lower_case_char = 'lowerCase',\n  at_least_one_upper_case_char = 'upperCase',\n  at_least_one_digit_char = 'digit',\n  at_least_one_special_char = ' specialChar',\n  at_custom_chars = 'customChars'\n}\n","import {Component, Input, ViewEncapsulation} from '@angular/core';\n\n@Component({\n  selector: 'mat-pass-toggle-visibility',\n  templateUrl: './mat-pass-toggle-visibility.component.html',\n  styleUrls: ['./mat-pass-toggle-visibility.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MatPassToggleVisibilityComponent {\n\n  @Input()\n  isVisible: boolean;\n\n  @Input()\n  tabindex?: string;\n\n  get type() {\n    return this.isVisible ? 'text' : 'password';\n  }\n\n}\n","<button\n  (click)=\"isVisible = !isVisible\"\n  class=\"mat-icon-button cdk-focused cdk-mouse-focused\"\n  mat-icon-button\n  matRipple\n  matRippleCentered=\"true\"\n  matRipple\n  [attr.tabindex]=\"tabindex ? tabindex : null\"\n  type=\"button\"\n>\n  <mat-icon>{{ isVisible ? \"visibility\" : \"visibility_off\" }}</mat-icon>\n</button>\n","import {AbstractControl, ValidatorFn} from '@angular/forms';\n\nexport class MatPasswordStrengthValidator {\n\n  isUndefinedOrEmpty(control: AbstractControl): any | undefined {\n    if (!control || !control.value || control.value.length === 0) {\n      return undefined;\n    }\n  }\n\n  validate(criteria: string, regex: RegExp): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (!regex.test(control.value)) {\n        const failed = {};\n        failed[criteria] = {\n          actualValue: control.value,\n          requiredPattern: regex\n        };\n        return failed;\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n  confirm(password: string): ValidatorFn {\n    const validator = (control: AbstractControl): { [key: string]: any } => {\n      this.isUndefinedOrEmpty(control);\n      if (control.value !== password) {\n        return {\n          notConfirmed: {\n            password: password,\n            passwordConfirmation: control.value\n          }\n        }\n      }\n      return undefined;\n    };\n    return validator;\n  }\n\n}\n","export const RegExpValidator = {\n  'lowerCase': RegExp(/^(?=.*?[a-z])/),\n  'upperCase': RegExp(/^(?=.*?[A-Z])/),\n  'digit': RegExp(/^(?=.*?[0-9])/),\n  'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n","import {\n  AfterContentChecked,\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport {ControlValueAccessor, UntypedFormControl, NG_VALUE_ACCESSOR, ValidatorFn, Validators} from '@angular/forms';\nimport {Colors, Criteria} from '../../enum';\nimport {MatPasswordStrengthValidator} from '../../validator';\nimport {RegExpValidator} from '../../validator/regexp.class';\nimport {ThemePalette} from '@angular/material/core';\n\n\n@Component({\n  selector: 'mat-password-strength',\n  exportAs: 'matPasswordStrength',\n  templateUrl: './mat-password-strength.component.html',\n  styleUrls: ['./mat-password-strength.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatPasswordStrengthComponent),\n      multi: true\n    }\n  ]\n})\nexport class MatPasswordStrengthComponent implements OnInit, OnChanges, AfterContentChecked, ControlValueAccessor {\n\n  @Input() password: string;\n  @Input() externalError: boolean;\n\n  @Input() enableLengthRule = true;\n  @Input() enableLowerCaseLetterRule = true;\n  @Input() enableUpperCaseLetterRule = true;\n  @Input() enableDigitRule = true;\n  @Input() enableSpecialCharRule = true;\n\n  @Input() min = 8;\n  @Input() max = 30;\n  @Input() customValidator: RegExp;\n\n  @Input() warnThreshold = 21;\n  @Input() accentThreshold = 81;\n\n  @Output()\n  onStrengthChanged: EventEmitter<number> = new EventEmitter();\n\n  criteriaMap = new Map<Criteria, RegExp>();\n\n  containAtLeastMinChars: boolean;\n  containAtLeastOneLowerCaseLetter: boolean;\n  containAtLeastOneUpperCaseLetter: boolean;\n  containAtLeastOneDigit: boolean;\n  containAtLeastOneSpecialChar: boolean;\n  containAtCustomChars: boolean;\n\n  // TO ACCESS VIA CONTENT CHILD\n  passwordFormControl: UntypedFormControl = new UntypedFormControl();\n  passwordConfirmationFormControl: UntypedFormControl = new UntypedFormControl();\n\n  validatorsArray: ValidatorFn[] = [];\n  Validators: ValidatorFn;\n  matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n\n  private _strength = 0;\n\n  get strength(): number {\n    return this._strength ? this._strength : 0;\n  }\n\n  private _color: ThemePalette;\n\n  get color(): ThemePalette {\n\n    if (this._strength < this.warnThreshold) {\n      return Colors.warn;\n    } else if (this._strength < this.accentThreshold) {\n      return Colors.accent;\n    } else {\n      return Colors.primary;\n    }\n  }\n\n  propagateChange = (_: any) => {\n  };\n\n  ngOnInit(): void {\n    this.setRulesAndValidators();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n      return;\n    } else if (changes.externalError && changes.externalError.currentValue) {\n      this._color = Colors.warn;\n      return;\n    } else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n      this.calculatePasswordStrength();\n    } else {\n      this.password && this.password.length > 0 ?\n        this.calculatePasswordStrength() : this.reset();\n    }\n  }\n\n  parseCustomValidatorsRegex(value: string | RegExp = this.customValidator) {\n    if (this.customValidator instanceof RegExp) {\n      return this.customValidator;\n    } else if (typeof this.customValidator === 'string') {\n      return RegExp(this.customValidator);\n    }\n  }\n\n  setRulesAndValidators(): void {\n    this.validatorsArray = [];\n    this.criteriaMap = new Map<Criteria, RegExp>();\n    this.passwordConfirmationFormControl\n      .setValidators(Validators.compose([\n        Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n      ]));\n    this.validatorsArray.push(Validators.required);\n    if (this.enableLengthRule) {\n      this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n      this.validatorsArray.push(Validators.minLength(this.min));\n      this.validatorsArray.push(Validators.maxLength(this.max));\n    }\n    if (this.enableLowerCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n    }\n    if (this.enableUpperCaseLetterRule) {\n      this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n    }\n    if (this.enableDigitRule) {\n      this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n    }\n    if (this.enableSpecialCharRule) {\n      this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n      this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n    }\n    if (this.customValidator) {\n      this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n      this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n    }\n\n    this.criteriaMap.forEach((value: any, key: string) => {\n      this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n    });\n\n    this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n    this.Validators = Validators.compose([...this.validatorsArray]);\n\n  }\n\n  calculatePasswordStrength(): void {\n    const requirements: Array<boolean> = [];\n    const unit = 100 / this.criteriaMap.size;\n\n    // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n    // console.log('unit = ', unit);\n\n    requirements.push(\n      this.enableLengthRule ? this._containAtLeastMinChars() : false,\n      this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false,\n      this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false,\n      this.enableDigitRule ? this._containAtLeastOneDigit() : false,\n      this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false,\n      this.customValidator ? this._containCustomChars() : false\n    );\n\n    this._strength = requirements.filter(v => v).length * unit;\n    this.propagateChange(this.strength);\n    // console.log('length = ', this._strength / unit);\n    this.onStrengthChanged.emit(this.strength);\n    this.setRulesAndValidators();\n  }\n\n  reset() {\n    this._strength = 0;\n    this.containAtLeastMinChars =\n      this.containAtLeastOneLowerCaseLetter =\n        this.containAtLeastOneUpperCaseLetter =\n          this.containAtLeastOneDigit =\n            this.containAtCustomChars =\n              this.containAtLeastOneSpecialChar = false;\n  }\n\n  writeValue(obj: any): void {\n    if (obj) {\n      this._strength = obj;\n    }\n  }\n\n  registerOnChange(fn: any): void {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    // throw new Error(\"Method not implemented.\");\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n    // throw new Error(\"Method not implemented.\");\n  }\n\n  private _containAtLeastMinChars(): boolean {\n    this.containAtLeastMinChars = this.password.length >= this.min;\n    return this.containAtLeastMinChars;\n  }\n\n  private _containAtLeastOneLowerCaseLetter(): boolean {\n    this.containAtLeastOneLowerCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_lower_case_char)\n        .test(this.password);\n    return this.containAtLeastOneLowerCaseLetter;\n  }\n\n  private _containAtLeastOneUpperCaseLetter(): boolean {\n    this.containAtLeastOneUpperCaseLetter =\n      this.criteriaMap\n        .get(Criteria.at_least_one_upper_case_char)\n        .test(this.password);\n    return this.containAtLeastOneUpperCaseLetter;\n  }\n\n  private _containAtLeastOneDigit(): boolean {\n    this.containAtLeastOneDigit =\n      this.criteriaMap\n        .get(Criteria.at_least_one_digit_char)\n        .test(this.password);\n    return this.containAtLeastOneDigit;\n  }\n\n  private _containAtLeastOneSpecialChar(): boolean {\n    this.containAtLeastOneSpecialChar =\n      this.criteriaMap\n        .get(Criteria.at_least_one_special_char)\n        .test(this.password);\n    return this.containAtLeastOneSpecialChar;\n  }\n\n  private _containCustomChars(): boolean {\n    this.containAtCustomChars =\n      this.criteriaMap\n        .get(Criteria.at_custom_chars)\n        .test(this.password);\n    return this.containAtCustomChars;\n  }\n\n  ngAfterContentChecked(): void {\n    if (this.password) {\n      this.calculatePasswordStrength();\n    }\n  }\n}\n","<mat-progress-bar [color]=\"color\"\n                  [value]=\"strength\"\n                  mode=\"determinate\">\n</mat-progress-bar>\n","import {animate, animation, AnimationReferenceMetadata, keyframes, style} from '@angular/animations';\n\nexport function flipIn(timing: number, rotateX: number, rotateY: number): AnimationReferenceMetadata {\n  const params = {timing: timing, delay: 0, rotateX, rotateY};\n\n  return animation(\n    [\n      style({'backface-visibility': 'visible'}),\n      animate(\n        '{{ timing }}s {{ delay }}s ease-in',\n        keyframes([\n          style({\n            opacity: 0,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n            offset: 0,\n          }),\n          style({\n            opacity: 1,\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n            offset: 0.4,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n            offset: 0.6,\n          }),\n          style({\n            transform:\n              'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n            offset: 0.8,\n          }),\n          style({\n            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n            offset: 1,\n          }),\n        ])\n      ),\n    ],\n    {params}\n  );\n}\n\nexport const flipInX = flipIn(1, 1, 0);\nexport const flipInY = flipIn(1, 0, 1);\n\nexport const shake = animation(\n  animate(\n    '{{ timing }}s {{ delay }}s',\n    keyframes([\n      style({transform: 'translate3d(0, 0, 0)', offset: 0}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.1}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.2}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.3}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.4}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.5}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.6}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.7}),\n      style({transform: 'translate3d(10px, 0, 0)', offset: 0.8}),\n      style({transform: 'translate3d(-10px, 0, 0)', offset: 0.9}),\n      style({transform: 'translate3d(0, 0, 0)', offset: 1}),\n    ])\n  ),\n  {params: {timing: 1, delay: 0}}\n);\n","<mat-card @list>\n  <mat-card-content>\n    <div *ngIf=\"passwordComponent.enableLowerCaseLetterRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\" @flipY>\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{lowerCaseCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableUpperCaseLetterRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{upperCaseCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableDigitRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneDigit; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{digitsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableSpecialCharRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastOneSpecialChar; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{specialCharsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.enableLengthRule\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtLeastMinChars; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{minCharsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"passwordComponent.customValidator\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.containAtCustomChars; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>{{customCharsCriteriaMsg}}</span>\n    </div>\n\n    <div *ngIf=\"enableScoreInfo\" @items class=\"info-row\">\n      <div *ngIf=\"passwordComponent.strength === 100; then done else error\">\n      </div>\n      <ng-template #done>\n        <mat-icon @positiveState color=\"primary\">{{matIconDone}}</mat-icon>\n      </ng-template>\n      <ng-template #error>\n        <mat-icon @negativeState color=\"warn\">{{matIconError}}</mat-icon>\n      </ng-template>\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\n    </div>\n\n  </mat-card-content>\n</mat-card>","import {Component, Input, OnInit} from '@angular/core';\nimport {MatPasswordStrengthComponent} from '../mat-password-strength/mat-password-strength.component';\nimport {animate, animateChild, keyframes, query, stagger, style, transition, trigger, useAnimation} from '@angular/animations';\nimport {shake} from '../../animations/index';\n\n@Component({\n  selector: 'mat-password-strength-info',\n  exportAs: 'matPasswordStrengthInfo',\n  templateUrl: './mat-password-strength-info.component.html',\n  styleUrls: ['./mat-password-strength-info.component.scss'],\n  animations: [\n    // nice stagger effect when showing existing elements\n    trigger('list', [\n      transition(':enter', [\n        // child animation selector + stagger\n        query('@items',\n          stagger(300, animateChild())\n        )\n      ]),\n    ]),\n    trigger('items', [\n      // cubic-bezier for a tiny bouncing feel\n      transition(':enter', [\n        style({transform: 'scale(0.5)', opacity: 0}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(1)', opacity: 1}))\n      ]),\n      transition(':leave', [\n        style({transform: 'scale(1)', opacity: 1, height: '*'}),\n        animate('1s cubic-bezier(.8,-0.6,0.2,1.5)',\n          style({transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px'}))\n      ]),\n    ]),\n    trigger('positiveState', [\n      transition(':enter', [\n        style({'backface-visibility': 'visible'}),\n        animate(\n          '{{ timing }}s {{ delay }}s ease-in',\n          keyframes([\n            style({\n              opacity: 0,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n              offset: 0,\n            }),\n            style({\n              opacity: 1,\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n              offset: 0.4,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n              offset: 0.6,\n            }),\n            style({\n              transform:\n                'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n              offset: 0.8,\n            }),\n            style({\n              transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n              offset: 1,\n            }),\n          ])\n        ),\n      ], {params: {timing: 1, delay: 0, rotateX: 1, rotateY: 0}}),\n    ]),\n    trigger('negativeState', [\n      transition(':enter', useAnimation(shake)),\n    ]),\n  ],\n})\nexport class MatPasswordStrengthInfoComponent implements OnInit {\n\n  @Input()\n  passwordComponent: MatPasswordStrengthComponent;\n\n  @Input()\n  enableScoreInfo = false;\n\n  @Input()\n  lowerCaseCriteriaMsg = 'contains at least one lower character';\n\n  @Input()\n  upperCaseCriteriaMsg = 'contains at least one upper character';\n\n  @Input()\n  digitsCriteriaMsg = 'contains at least one digit character';\n\n  @Input()\n  specialCharsCriteriaMsg = 'contains at least one special character';\n\n  @Input()\n  customCharsCriteriaMsg = 'contains at least one custom character';\n\n  @Input()\n  minCharsCriteriaMsg: string;\n\n  @Input()\n  matIconDone = 'done';\n\n  @Input()\n  matIconError = 'error';\n\n  ngOnInit(): void {\n    if (!this.minCharsCriteriaMsg) {\n      this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`\n    }\n  }\n\n}\n","import {CommonModule} from '@angular/common';\nimport {ModuleWithProviders, NgModule} from '@angular/core';\nimport {MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent} from './component';\n\n// validator\nexport {RegExpValidator} from './validator/regexp.class';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressBarModule,\n    MatCardModule,\n    MatIconModule,\n    MatRippleModule\n  ],\n  exports: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ],\n  declarations: [\n    MatPasswordStrengthComponent,\n    MatPasswordStrengthInfoComponent,\n    MatPassToggleVisibilityComponent\n  ]\n})\nexport class MatPasswordStrengthModule {\n  static forRoot(): ModuleWithProviders<MatPasswordStrengthModule> {\n    return {\n      ngModule: MatPasswordStrengthModule,\n      providers: []\n    };\n  }\n}\n","/*\n * Public API Surface of password-strength\n */\n\nexport * from './lib/enum';\nexport * from './lib/component';\nexport * from './lib/animations';\nexport * from './lib/validator';\nexport * from './lib/mat-password-strength.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1","i2","i3"],"mappings":"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"}}}